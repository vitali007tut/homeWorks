// 1) Почитать про принципы программирования KISS, DRY, YAGNI + почитать про "Антипаттерны" Чистого кода
//  - Keep it Simple, Stupid
//  - Don't repeat yourself
//  - You aren't gonna need it
//
//  Антипаттерн (антишаблон) — это термин, обозначающий приемы, которые НЕ нужно применять при решении задач:
//  - Спагетти-код -- код с практически нулевой структурой. В нем ничего не модулируется.
//  - Золотой молот -- везде применять знакомый и любимый архитектурный подход
//  - Лодочный якорь -- неиспользуемый код в базе
//  - Мертвый код -- код, который вызывается но ничего не делает (тесты проходят при его удалении)
//  - Разрастание кода -- наличие в кодовой базе объектов, которые существуют исключительно для вызова других объектов
//  - Божественный объект -- делает слишком много

// 2) Прочитать про способы хранения LocalStorage, SessionStorage и Cookie
//      localStorage:
//      - Этот объект один на все вкладки и окна в рамках источника (один и тот же домен/протокол/порт).
//      - Данные не имеют срока давности, по которому истекают и удаляются. Сохраняются после перезапуска браузера и даже ОС.

//      sessionStorage
//      - существует только в рамках текущей вкладки браузера
//      - Данные продолжают существовать после перезагрузки страницы

//      Cookie – это небольшие строки данных, которые хранятся непосредственно в браузере.
//      Куки хранятся в свойстве document.cookie. Это свойство представляет собой строку в формате имя=значение.
//      (токен авторизации или данные пользователя)

// 3) HTML / CSS - Базовая структура html документа, БЭМ методология
//  - Тег <html> определяет начало HTML-файла, внутри него хранится заголовок (<head>) и тело документа (<body>)
//  - Блок head, содержащий метаинформацию о сайте
//  - Блок body является основным местом, где строится HTML-разметка

//      БЭМ (Блок, Элемент, Модификатор)
//      - Блок -- 'block-example'
//      - Элемент -- header__search-form — элемент search-form блока header
//      - Модификатор -- 'имя-блока_имя-модификатора', 'имя-блока__имя-элемента_имя-модификатора'
//          Имя модификатора блока — header_theme_green-forest — модификатор theme в значении green-forest блока header
//      - Имя модификатора элемента — header__search-form_disabled — булев модификатор disabled элемента search-form блока header

// 4) Почитать про паттерны функционального программирования + посмотреть примеры использования
//      Практики использования паттернов функционального программирования:
//      1. Неизменяемость данных
//      2. Чистые функции -- функции, которые не имеют побочных эффектов и всегда возвращают одинаковый результат при одинаковых входных данных
//      3. Композиция функций -- это процесс объединения нескольких функций в одну
//      4. Функции высшего порядка -- функции, которые принимают другие функции в качестве аргументов или возвращают функции в качестве результата
//      5. Рекурсия

//      Любой класс или тип данных, который хранит значение и реализует метод map, называется функтором.
//      Монады — это подтип функторов, так как у них есть метод map, но они также реализуют другие методы, например, ap, of, chain.
//      Монада “Maybe” — это класс, который имплементирует спецификацию монады. Её особенность заключается в том, что с помощью нее можно решать проблемы с null и undefined
//      Каррирование
//      https://tproger.ru/translations/functional-js-1

// 5) Способы позиционирования контента на странице
//  Значения position:
// static — значение по умолчанию, элемент позиционируется в соответствии с его местом в потоке документа;
// relative — элемент позиционируется относительно своего исходного положения в потоке документа;
// absolute — элемент позиционируется относительно ближайшего родительского элемента, который имеет позиционирование, отличное от static;
// fixed — элемент позиционируется относительно окна браузера;
// sticky — элемент остаётся на месте при прокрутке страницы, но при этом может быть отодвинут от своей стандартной позиции.

// 6) Веса селекторов
//  типы селекторов по убыванию специфичности:
//  - Селекторы по идентификатору; 1.0.0.
//  - Селекторы по классу, селекторы по атрибуту и селекторы с псевдоклассами; 0.1.0.
//  - Селекторы по тегу, селекторы с псевдоэлементами. 0.0.1.